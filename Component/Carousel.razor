
<div class="container blazor-carousel @(CssClass)">
    @if (imageset != null)
    {
        <div class="blazor-carousel-inner">
            @foreach (var imageFile in imageset)
            {
                <div class="blazor-carousel-image @GetImageState()">
                    <img class="d-block center @(ImageClass)" src="@GetImageSource(imageFile)" alt="@imageFile.FileName">
                </div>
            }

            @ResetRenderCounter();
        </div>

        <div class="blazor-carousel-nav-container">
            <div class="blazor-carousel-arrow-container float-left ml-2">
                <div class="blazor-carousel-control-nav">
                    @if (_activeImageIndex > 0 && imageset.Count() > 1)
                    {
                        <a class="blazor-carousel-control-prev" @onclick="OnPreviousClicked">
                            <span class="carousel-control-prev-icon"></span>
                        </a>
                    }
                </div>
            </div>

            <div class="blazor-carousel-indicators-container mt-2">
                <ol>
                    @for (int indicatorIndex=0; indicatorIndex < imageset.Count; indicatorIndex++)
                    {
                        int copiedIndex = indicatorIndex;
                        <li class="blazor-carousel-indicator @GetIndicatorState()" @onclick="() => SetActiveImageIndex(copiedIndex)" blazor-indicator-index="@_carouselRenderIndex">&nbsp;</li>
                    }
                </ol>
            </div>

            <div class="blazor-carousel-arrow-container float-right mr-2">
                <div class="blazor-carousel-control-nav">
                    @if (_activeImageIndex < imageset.Count() - 1 && imageset.Count() > 1)
                    {
                        <a class="blazor-carousel-control-next" @onclick="OnNextClicked">
                            <span class="carousel-control-next-icon"></span>
                        </a>
                    }
                </div>
            </div>
        </div>

        @ResetRenderCounter();
    }
</div>


@code {

    [Parameter]
    public string id { get; set; }

    [Parameter]
    public List<ImageFile> imageset { get; set; }

    [Parameter]
    public string name { get; set; }

    [Parameter]
    public string CssClass { get; set; }

    [Parameter]
    public string ImageClass { get; set; }

    private int _carouselRenderIndex = -1;
    private int _activeImageIndex = 0;


    protected void OnNextClicked()
    {
        _carouselRenderIndex = -1;
        _activeImageIndex += 1;
        this.StateHasChanged();
    }

    protected void OnPreviousClicked()
    {
        _carouselRenderIndex = -1;
        _activeImageIndex -= 1;
        this.StateHasChanged();
    }

    private void SetActiveImageIndex(int newIndex)
    {
        _carouselRenderIndex = -1;
        _activeImageIndex = newIndex;

        this.StateHasChanged();
    }

    private string GetImageState()
    {
        string imageStateClass = "hidden";

        _carouselRenderIndex++;

        if (_carouselRenderIndex == _activeImageIndex)
        {
            imageStateClass = null;
        }

        return imageStateClass;
    }

    private string GetIndicatorState()
    {
        string imageStateClass = "";

        _carouselRenderIndex++;

        if (_carouselRenderIndex == _activeImageIndex)
        {
            imageStateClass = "blazor-carousel-indicator-active";
        }

        return imageStateClass;
    }

    private string GetImageSource(ImageFile imageFile)
    {
        string imageSrc = imageFile.Url;

        if (string.IsNullOrEmpty(imageFile.Url) && imageFile.FileContent?.Length > 0) {
            imageSrc = imageFile.Base64Image;
        }

        return imageSrc;
    }

    private string ResetRenderCounter()
    {

        _carouselRenderIndex = -1;
        return null;
    }
}

